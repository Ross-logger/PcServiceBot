import logging
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from app.keyboards import *
import app.database as database
from dotenv import load_dotenv
from app.albumHandler import AlbumMiddleware
from typing import List, Union

import os

storage = MemoryStorage()
load_dotenv()

# loading .env variables
GENERAL_GROUP_ID = os.getenv('GENERAL_GROUP_ID')
GROUP_ID = os.getenv('GROUP_ID')
ADMIN_ID = os.getenv('MAIN_ADMIN_ID')
WHATSAPP_NUMBER = os.getenv('WHATSAPP_NUMBER')
TELEGRAM_LINK_CONTACT = os.getenv('TELEGRAM_LINK_CONTACT')
SOCIAL_VK = os.getenv('SOCIAL_VK')
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    await database.db_start()
    print('Bot is launched')


class NewOrder(StatesGroup):
    teleID = State()
    teleNick = State()
    gettingName = State()
    gettingNumber = State()
    gettingDescription = State()
    gettingPhoto = State()


class CallMe(StatesGroup):
    gettingNumber = State()
    teleName = State()
    teleID = State()
    teleNick = State()


class NewService(StatesGroup):
    gettingFIO = State()
    gettingName = State()
    gettingPhone = State()
    gettingAddress = State()
    gettingPhotoRoom = State()
    gettingPhotoBuilding = State()
    gettingPhotoEquipment = State()
    gettingDescription = State()


# def generate_clickable_number(number):
#     return f'<a href="tel:{number}">{number}</a>'


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await database.cmd_start_db(message.from_user.id, message.from_user.username)
    if message.from_user.id == int(ADMIN_ID):
        await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                             reply_markup=main_admin_keyboard)
    else:
        await message.answer(f'''–†–∞–¥—ã –≤–∞–º, {message.from_user.first_name}, –≤ –Ω–∞—à–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –ø—Ä–∏—ë–º–∞-–≤—ã–¥–∞—á–∏ "PC_Donetsk service"!

‚ùó–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ–¥ –∑–≤–æ–Ω–∫–æ–º –≤—Å—ë –∂–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∑–¥–µ—Å—å, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ –∑–∞–Ω—è—Ç—å—Å—è —Ä–µ–º–æ–Ω—Ç–æ–º –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!

–í–Ω–∏–º–∞–Ω–∏–µ, —Å–µ–π—á–∞—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:
üëâ –†–æ—Å—Å–∏—è, –≥. –ú–æ—Å–∫–≤–∞, –ü—è—Ç–Ω–∏—Ü–∫–æ–µ —à–æ—Å—Å–µ 18
     "–¢–ö –ú–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–¥–∏–æ—Ä—ã–Ω–æ–∫" –ø–∞–≤. 560 –Ω–∞ 3 —ç—Ç–∞–∂–µ''', reply_markup=main_keyboard)


@dp.message_handler(text='–í–≤–µ—Å—Ç–∏ –±—ã—Å—Ç—Ä—ã–π –∫–æ–¥ üîêüî¢')
async def fastCode(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –∫–æ–¥')


@dp.message_handler(text='–ù–∞—à–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã üõ†(–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è, –∫–æ–Ω—Ç–∞–∫—Ç—ã)')
async def serviceCentresAddresses(message: types.Message):
    await message.answer(f'''–°–µ–π—á–∞—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:
üëâ –†–æ—Å—Å–∏—è, –≥. –ú–æ—Å–∫–≤–∞, –ü—è—Ç–Ω–∏—Ü–∫–æ–µ —à–æ—Å—Å–µ 18
     "–¢–ö –ú–∏—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–¥–∏–æ—Ä—ã–Ω–æ–∫" –ø–∞–≤. 560 –Ω–∞ 3 —ç—Ç–∞–∂–µ
     
     
–ö–æ–Ω—Ç–∞–∫—Ç—ã:
    WhatsApp –Ω–æ–º–µ—Ä: {WHATSAPP_NUMBER}
    –¢–µ–ª–µ–≥—Ä–∞–º–º: {TELEGRAM_LINK_CONTACT}''')


@dp.message_handler(text='–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ ‚òéÔ∏è')
async def callMe(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tele_id'] = message.from_user.id
        data['tele_nick'] = message.from_user.username
    await CallMe.gettingNumber.set()
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä')


@dp.message_handler(state=CallMe.gettingNumber)
async def callMe(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number'] = message.text
    await database.call_later_db(state)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è")
    await bot.send_message(GENERAL_GROUP_ID, f'''‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏–ª —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º!
        –ù–∏–∫: @{data['tele_nick']}
        –ù–æ–º–µ—Ä: {data['number']}
    ''', parse_mode='HTML')
    await bot.send_message(GROUP_ID, f'''‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏–ª —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º!

    –ù–∏–∫: @{data['tele_nick']}
    –ù–æ–º–µ—Ä: {data['number']}
    ''', parse_mode='HTML')
    await state.finish()


@dp.message_handler(text='–°–¥–∞—Ç—å –≤ —Ä–µ–º–æ–Ω—Ç')
async def placeOrder(message: types.Message):
    await NewOrder.gettingName.set()
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è')


@dp.message_handler(state=NewOrder.gettingName)
async def getName(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tele_id'] = message.from_user.id
        data['tele_nick'] = message.from_user.username
        data['name'] = message.text
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä')
    await NewOrder.next()


@dp.message_handler(state=NewOrder.gettingNumber)
async def getName(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number'] = message.text
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É')
    await NewOrder.next()


@dp.message_handler(state=NewOrder.gettingDescription)
async def getName(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['problem'] = message.text
    await message.answer(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ —Ö–æ—á—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"',
        reply_markup=photo_keyboard)
    await NewOrder.next()


@dp.message_handler(lambda message: not message.photo, state=NewOrder.gettingPhoto)
async def add_item_photo_check(message: types.Message):
    await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!\n –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ —Ö–æ—á—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"',
                         reply_markup=photo_keyboard)


@dp.callback_query_handler(lambda query: query.data == "dont_send", state=NewOrder.gettingPhoto)
async def handle_dont_send_query(query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = ""
    await bot.edit_message_reply_markup(
        chat_id=query.from_user.id,
        message_id=query.message.message_id,
        reply_markup=None
    )
    await database.add_order_db(state)
    await query.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è")
    await bot.send_message(GENERAL_GROUP_ID, f"""‚ö†Ô∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n
        –ò–º—è: {data['name']}\n
        –ù–∏–∫: @{data['tele_nick']}\n
        –ù–æ–º–µ—Ä: {data['number']}\n
        –û–ø–∏—Å–∞–Ω–∏–µ: {data['problem']}
                """)
    await bot.send_message(GROUP_ID, f"""‚ö†Ô∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n
    –ò–º—è: {data['name']}\n
    –ù–∏–∫: @{data['tele_nick']}\n
    –ù–æ–º–µ—Ä: {data['number']}\n
    –û–ø–∏—Å–∞–Ω–∏–µ: {data['problem']}
            """)

    await state.finish()


@dp.message_handler(content_types=['photo'], state=NewOrder.gettingPhoto)
async def add_item_photo(message: types.Message, state: FSMContext, album: List[types.Message]):
    media_group = []
    async with state.proxy() as data:
        message_text = f"""‚ö†Ô∏è‚ùó–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @pcservicebot\n
        {data['number']} {data['name']}\n
        {data['problem']}\n
        –†–æ—Å—Å–∏—è > –ú–æ—Å–∫–≤–∞\n
        –ù–∏–∫–Ω–µ–π–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ Telegram: @{data['tele_nick']}"""
        data['photo'] = ''
        for obj in album:
            if obj.photo:
                photo = obj.photo[-1]
                data['photo'] += photo.file_id
                media_group.append(types.InputMediaPhoto(photo.file_id))
                print(types.InputMediaPhoto(photo.file_id))
            else:
                return await message.answer("Invalid album format. Only photos are supported.")

    await message.answer_media_group(media_group)

    await database.add_order_db(state)
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è")

    await bot.send_media_group(GENERAL_GROUP_ID, media=media_group)
    await bot.send_message(GENERAL_GROUP_ID, message_text)
    await bot.send_media_group(GROUP_ID, media=media_group)
    await bot.send_message(GROUP_ID, message_text)

    await state.finish()


@dp.message_handler(text='–ù–∞—à–∏ —Å–æ—Ü. —Å–µ—Ç–∏ üì≤')
async def ourSocialNetworks(message: types.Message):
    await message.answer(f'–í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {SOCIAL_VK}\nInstagram: pc_donetsk_service')


@dp.message_handler(text='–§—Ä–∞–Ω—à–∏–∑–∞üí∞')
async def franchise(message: types.Message):
    await message.answer(f'–ö—Ä—É—Ç—è–∫! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ {TELEGRAM_LINK_CONTACT}')


@dp.message_handler(text='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def adminPanel(message: types.Message):
    if message.from_user.id == int(ADMIN_ID):
        await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=panel_admin_keyboard)
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É')


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –°–µ—Ä–≤–∏—Å–Ω—ã–π –¶–µ–Ω—Ç—Ä')
async def addNewService(message: types.Message, state: FSMContext):
    if message.from_user.id == int(ADMIN_ID):
        async with state.proxy() as data:
            data['tele_id'] = message.from_user.id
            data['owner_tele_nick'] = message.from_user.username
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û')
        await NewService.gettingFIO.set()
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É')


@dp.message_handler(state=NewService.gettingFIO)
async def getNameNewService(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['owner_name'] = message.text
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ –°–µ—Ä–≤–∏—Å–∞')
    await NewService.next()


@dp.message_handler(state=NewService.gettingName)
async def getNameNewService(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['service_name'] = message.text
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –í–∞—à–µ–≥–æ –°–µ—Ä–≤–∏—Å–∞/ –õ–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä ')
    await NewService.next()


@dp.message_handler(state=NewService.gettingPhone)
async def getNameNewService(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number'] = message.text
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –í–∞—à–µ–≥–æ –°–µ—Ä–≤–∏—Å–∞ ')
    await NewService.next()


@dp.message_handler(state=NewService.gettingAddress)
async def getNameNewService(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–æ—Ç–æ –ü–æ–º–µ—â–µ–Ω–∏—è')
    await NewService.next()


@dp.message_handler(content_types=['photo'], state=NewService.gettingPhotoRoom)
async def getPhotoNewService(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo_room'] = message.photo[0].file_id
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–æ—Ç–æ –ó–¥–∞–Ω–∏—è')
    await NewService.next()


@dp.message_handler(lambda message: not message.photo, state=NewService.gettingPhotoRoom)
async def getPhotoNewService(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–æ—Ç–æ –ü–æ–º–µ—â–µ–Ω–∏—è, —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç!')


@dp.message_handler(content_types=['photo'], state=NewService.gettingPhotoBuilding)
async def getPhotoNewService(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo_building'] = message.photo[0].file_id
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–æ—Ç–æ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    await NewService.next()


@dp.message_handler(lambda message: not message.photo, state=NewService.gettingPhotoBuilding)
async def getPhotoNewService(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–æ—Ç–æ –ó–¥–∞–Ω–∏—è, —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç!')


@dp.message_handler(content_types=['photo'], state=NewService.gettingPhotoEquipment)
async def getPhotoNewService(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo_equipment'] = message.photo[0].file_id
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –û–ø–∏—Å–∞–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞ (–∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∏ —Ç–¥)')
    await NewService.next()


@dp.message_handler(lambda message: not message.photo, state=NewService.gettingPhotoEquipment)
async def getPhotoNewService(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–æ—Ç–æ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç!')


@dp.message_handler(state=NewService.gettingDescription)
async def getNameNewService(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await database.add_new_service(state)
    message_text = f"""‚ö†Ô∏è –ù–æ–≤—ã–π –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞!\n
    –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞: {data['owner_name']}\n
    –ù–∏–∫: @{data['owner_tele_nick']}\n
    –ù–æ–º–µ—Ä: {data['number']}\n
    –ù–∞–∑–≤–∞–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞: {data['service_name']}\n
    –ê–¥—Ä–µ—Å: {data['address']}\n
    –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"""
    media_group = []
    media_group.append(types.InputMediaPhoto(data['photo_room'], caption=message_text))
    media_group.append(types.InputMediaPhoto(data['photo_building']))
    media_group.append(types.InputMediaPhoto(data['photo_equipment']))
    await bot.send_media_group(GENERAL_GROUP_ID, media=media_group)
    await bot.send_media_group(GROUP_ID, media=media_group)
    await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –í–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º üòé')
    await state.finish()


@dp.message_handler(text='–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
async def adminPanel(message: types.Message):
    if message.from_user.id == int(ADMIN_ID):
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', reply_markup=main_admin_keyboard)
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É')


@dp.message_handler()
async def unknownAnswer(message: types.Message):
    await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É")


if __name__ == '__main__':
    dp.middleware.setup(AlbumMiddleware())
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
